@page "/webinars"
@using CommunityHub.Application.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<h3>Webinars</h3>

<div class="position-relative">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <p>Loading...</p>
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Total Seats</th>
                <th>Available Seats</th>
                <th>Is Active</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            @if (webinars.Any())
            {
                @foreach (var webinar in webinars)
                {
                    <tr>
                        <td>@webinar.Title</td>
                        <td>@webinar.Description</td>
                        <td>@webinar.StartDate.ToString("dd/MM/yyyy")</td>
                        <td>@webinar.EndDate.ToString("dd/MM/yyyy")</td>
                        <td>@webinar.TotalSeats</td>
                        <td>@webinar.AvailableSeats</td>
                        <td>@(webinar.IsActive ? "Active" : "Inactive")</td>
                        <td>
                            <button 
                                type="button" 
                                data-bs-toggle="modal"
                                data-bs-target="#webinarDetailsModal"
                                class="btn btn-primary" 
                                @onclick="() => OpenDetailsModal(webinar.Id)">View Details
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center">No webinars available</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button type="button"
    class="btn btn-primary"
    data-bs-toggle="modal"
    data-bs-target="#webinarAddModal"
    @onclick="ClearWebinarAddModal">
        Create New Webinar
</button>

<!-- Webinar Details Modal -->
<div class="modal modal-lg fade" id="webinarDetailsModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5">Webinar Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedWebinar == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    <p><strong>Title:</strong> @selectedWebinar.Title</p>
                    <p><strong>Description:</strong> @selectedWebinar.Description</p>
                    <p><strong>Start Date:</strong> @selectedWebinar.StartDate.ToString("dd/MM/yyyy")</p>
                    <p><strong>End Date:</strong> @selectedWebinar.EndDate.ToString("dd/MM/yyyy")</p>
                    <p><strong>Total Seats:</strong> @selectedWebinar.TotalSeats</p>
                    <p><strong>Available Seats:</strong> @selectedWebinar.AvailableSeats</p>
                    <p><strong>Status:</strong> @(selectedWebinar.IsActive ? "Active" : "Inactive")</p>

                    @if (selectedWebinar.Bookings.Any())
                    {
                        <div>
                            <hr />
                            <h5>Attendees</h5>
                            <table>
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Booking Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var booking in selectedWebinar.Bookings)
                                    {
                                        <tr>
                                            <td>@booking.User!.Name</td>
                                            <td>@booking.User!.Email</td>
                                            <td>@booking.BookingDate</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Webinar Add Modal -->
<div class="modal modal-lg fade" id="webinarAddModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5">Add Webinar</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="webinar-title">Title *</span>
                    <input type="text" @bind-value="Title" class="form-control" placeholder="Title" aria-label="Title" aria-describedby="webinar-title">
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text" id="webinar-description">Description</span>
                    <input type="text" @bind-value="Description" class="form-control" placeholder="Description" aria-label="Description" aria-describedby="webinar-description">
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text" id="webinar-startdate">Start Date *</span>
                    <input type="date" @bind-value="StartDate" class="form-control" placeholder="Start Date" aria-label="StartDate" aria-describedby="webinar-startdate">
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text" id="webinar-enddate">Start Date *</span>
                    <input type="date" @bind-value="EndDate" class="form-control" placeholder="End Date" aria-label="EndDate" aria-describedby="webinar-enddate">
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text" id="webinar-totalseats">Total Seats *</span>
                    <input type="number" @bind-value="TotalSeats" class="form-control" placeholder="Total Seats" aria-label="TotalSeats" aria-describedby="webinar-totalseats">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => AddWebinar()" disabled="@IsSaveDisabled">Save</button>
            </div>
        </div>
    </div>
</div>

<style>
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10;
        font-size: 1.5rem;
        color: #007bff;
        font-weight: bold;
        border-radius: 0.25rem;
    }

    .position-relative {
        position: relative;
    }

    .modal table {
        width: 100%;
    }
</style>

@code {
    private List<WebinarDto> webinars = new List<WebinarDto>();
    private bool isLoading = true;
    private WebinarDetailDto? selectedWebinar;
    private string Title = string.Empty;
    private string Description = string.Empty;
    private DateTime? StartDate;
    private DateTime? EndDate;
    private int TotalSeats;
    private bool IsSaveDisabled => string.IsNullOrWhiteSpace(Title) || StartDate is null || EndDate is null || TotalSeats < 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadWebinars();
    }

    private async Task LoadWebinars()
    {
        isLoading = true;
        try
        {
            webinars = await Http.GetFromJsonAsync<List<WebinarDto>>("webinar") ?? [];
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");

            webinars = []; // Assicura che la lista venga comunque visualizzata come vuota in caso di errore
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OpenDetailsModal(Guid webinarId)
    {
        selectedWebinar = null;
        try
        {
            selectedWebinar = await Http.GetFromJsonAsync<WebinarDetailDto>($"webinar/{webinarId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void ClearWebinarAddModal()
    {
        Title = string.Empty;
        Description = string.Empty;
        StartDate = null;
        EndDate = null;
        TotalSeats = 0;
    }

    private async Task AddWebinar()
    {
        isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync<WebinarDto>("webinar", new WebinarDto()
            {
                Title = Title,
                Description = Description,
                StartDate = StartDate!.Value,
                EndDate = EndDate!.Value,
                TotalSeats = TotalSeats,
                AvailableSeats = TotalSeats,
                IsActive = true
            });

            if (response.IsSuccessStatusCode)
            {
                await LoadWebinars();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", 
                    await response.Content.ReadAsStringAsync()
                );
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
}
